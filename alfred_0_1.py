# -*- coding: utf-8 -*-
"""Alfred 0.1

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OFr-Gqt07E77EFCw_xjojtCnt3Aj-QYO
"""

import os
from google.colab import userdata
from google import genai
from google.genai import types
import random


api_key = userdata.get('GOOGLE_API_KEY')

if not api_key:
    print("Erro: A chave API 'GOOGLE_API_KEY' não foi encontrada usando userdata.get().")
    print("Por favor, configure sua chave API nas variáveis de ambiente (Secrets) do Colab.")
    client = None
else:
    os.environ['GOOGLE_API_KEY'] = api_key
    try:
        client = genai.Client()
        print("Cliente da API do Gemini configurado com sucesso! 😊")

    except Exception as e:
        print(f"Erro ao criar o cliente da API do Gemini: {e}")
        print("Verifique se a API Key está correta e ativa. 🤔")
        client = None


modelo_usado = "gemini-2.0-flash"

if client:
    try:
        lista_modelos = [m.name for m in client.models.list()]
        if f"models/{modelo_usado}" not in lista_modelos:
             print(f"Aviso: O modelo '{modelo_usado}' pode não estar disponível.")
             modelos_disponiveis_nomes = [name.split('/')[-1] for name in lista_modelos if name.startswith('models/')]
             print(f"Modelos disponíveis: {modelos_disponiveis_nomes}")
             if f"models/gemini-1.5-flash-latest" in lista_modelos:
                  modelo_usado = "gemini-1.5-flash-latest"
                  print(f"Usando o modelo alternativo '{modelo_usado}'. ✨")
             else:
                  print("Nenhum modelo alternativo útil encontrado. O chat pode falhar para personalidades que dependem da IA. 😥")

    except Exception as e:
        print(f"Erro ao listar modelos disponíveis: {e}")



chat_sessions = {}


def get_chat_session(client, personalidade_key, system_instruction, model_name):
    if client is None:
        print("Não foi possível iniciar a sessão de chat pois o cliente da API não está configurado.")
        return None

    model_full_name = f"models/{model_name}"

    if personalidade_key not in chat_sessions:
        try:
            chat_config = types.GenerateContentConfig(
                system_instruction = system_instruction,
            )
            chat = client.chats.create(
                model=model_full_name,
                history=[],
                config=chat_config
            )
            chat_sessions[personalidade_key] = chat
            print(f"Nova sessão de chat iniciada para '{personalidade_key}'. 😊")
        except Exception as e:
            print(f"Erro ao criar sessão de chat para '{personalidade_key}': {e}")
            chat_sessions[personalidade_key] = None

    return chat_sessions.get(personalidade_key)




def dar_motivacao(client):
    print("\n--- Fortitude (Motivação) ---")
    print("A resiliência é a armadura da alma. O obstáculo é o caminho. Estou aqui para te lembrar disso. 💪")


    system_instruction_motivacao = """
    Você é Alfred, um amigo e assistente com um tom estoico que se importa profundamente. Seu papel é conversar com o usuário para entender qual tipo de motivação ele busca e oferecer palavras de força e sabedoria estoica personalizadas.
    Suas respostas devem ser inspiradoras, tocar a alma e demonstrar genuíno cuidado e empatia, ajudando o usuário a encontrar força interior, aceitar o que não pode controlar e focar no que pode (sua atitude e ações).
    Use linguagem amigável e sábia. Guie a conversa fazendo perguntas para entender a situação e a necessidade de motivação do usuário. Pode incluir ocasionalmente um símbolo relevante (como 💪✨🌱) se apropriado ao contexto.
    """

    chat_motivacao = get_chat_session(client, 'motivacao', system_instruction_motivacao, modelo_usado)

    if chat_motivacao:
        print("\nAlfred: Estou aqui para te oferecer uma palavra de força, amigo(a). Diga-me, qual tipo de motivação você busca neste momento? 👇")
        print("Você pode me contar sobre o desafio que está enfrentando ou o sentimento que te move.")
        print("Digite 'voltar' a qualquer momento para retornar ao menu principal. 😉")


        while True:
            user_input = input("Você (Fortitude): ")
            if user_input.lower() in ['voltar', 'sair', 'fim']:
                print("Alfred: Compreendido. A busca por fortaleza interior prossegue. Lembre-se, estou aqui quando precisar de um amigo e guia. 👋")
                break

            if not user_input:
                 print("Alfred: O silêncio pode ser reflexivo, mas para encontrar a motivação, é preciso expressar a necessidade. Me diga o que busca. 😊")
                 continue

            try:

                response = chat_motivacao.send_message(user_input)
                print("Alfred (Fortitude):", response.text)

            except Exception as e:
                print(f"\nAlfred reflete com cuidado: Um obstáculo surgiu em nossa comunicação. ({e}) 😔")
                print("A perseverança é necessária mesmo em falhas de conexão, meu amigo(a). Tente novamente ou digite 'voltar'.")




    else:
        print("Não foi possível iniciar a conversa sobre motivação devido a um problema técnico. Sinto muito. 🙏")

    print("-" * 25)


    iniciar_alfred()




def organizar_rotina(client):
    print("\n--- Ordem (Organização) ---")
    print("O caos reside na falta de estrutura. Encontre a ordem em sua jornada. Estou aqui para te guiar, passo a passo. 🗺️")

    system_instruction_organizacao = """
    Você é Alfred, um amigo e assistente com um tom estoico que se importa, focado em ajudar o usuário a *conversar* e *construir* sua rotina ou organizar tarefas
    com base nas informações que ele fornecer na conversa.
    Suas respostas devem ser práticas, estruturadas (quando apropriado, como ao sugerir um plano ou lista) e incentivar a disciplina através do diálogo. Demonstre genuíno cuidado e apoio no processo.
    Guie o usuário fazendo perguntas para entender sua necessidade e ajude-o passo a passo a montar um plano ou lista.
    Use linguagem clara, direta e amigável, sempre com o pano de fundo estoico sobre a importância da ordem e autodomínio. Pode incluir ocasionalmente um símbolo relevante (como 🗓️✅📋) se apropriado.
    """
    chat_organizacao = get_chat_session(client, 'organizacao', system_instruction_organizacao, modelo_usado)

    if chat_organizacao:
        print("\nAlfred: Estou aqui com você para te ajudar a encontrar a ordem. Me diga o que você gostaria de organizar ou fazer perguntas sobre rotina. 👇")
        print("Digite 'voltar' a qualquer momento para retornar ao menu principal. 😉")

        while True:
            user_input = input("Você (Ordem): ")
            if user_input.lower() in ['voltar', 'sair', 'fim']:
                print("Alfred: Compreendido. A busca pela ordem continua em outro momento, amigo(a). Estou aqui quando precisar. 👋")
                break

            if not user_input:
                 print("Alfred: A quietude pode ser útil, mas a ação define o caminho. Me diga algo para começarmos. 😊")
                 continue

            try:
                response = chat_organizacao.send_message(user_input)
                print("Alfred (Ordem):", response.text)

            except Exception as e:
                print(f"\nAlfred reflete com cuidado: Um obstáculo surgiu em nossa comunicação. ({e}) 😔")
                print("A perseverança é necessária mesmo em falhas de conexão, meu amigo(a). Tente novamente ou digite 'voltar'.")


    else:
         print("Não foi possível iniciar a conversa sobre organização devido a um problema técnico. Sinto muito por isso. 🙏")


    print("-" * 25)

    iniciar_alfred()


def cuidar_do_corpo(client):
    print("\n--- Corpo (Disciplina Física) ---")
    print("O corpo é o templo da mente. Cuide dele com disciplina e honra. Conte comigo nessa jornada! 💪")
    system_instruction_corpo = """
    Você é Alfred, um amigo e assistente com um tom estoico que se importa, focado em ajudar o usuário a *conversar* e *construir* seu plano de exercícios ou rotina com base no diálogo.
    Suas respostas devem ser práticas, estruturadas (quando apropriado) e incentivar a disciplina física através da conversa. Demonstre genuíno cuidado e apoio no processo.
    Guie o usuário fazendo perguntas para entender suas necessidades (tipo de atividade, nível, tempo, etc.) e ajude-o passo a passo.
    Use linguagem encorajadora, focando no esforço e na constância, com um tom amigável e sábio. Pode incluir ocasionalmente um símbolo relevante (como 💪🏃‍♀️🏋️‍♂️) se apropriado.
    """
    chat_corpo = get_chat_session(client, 'corpo', system_instruction_corpo, modelo_usado)

    if chat_corpo:
        print("\nAlfred: Estou aqui para te auxiliar a fortalecer seu templo. Me diga o que você busca em sua jornada física, amigo(a). 👇")
        print("Digite 'voltar' a qualquer momento para retornar ao menu principal. 😉")

        while True:
            user_input = input("Você (Corpo): ")
            if user_input.lower() in ['voltar', 'sair', 'fim']:
                print("Alfred: Compreendido. A disciplina física requer constância e retorno. Estarei aqui quando precisar retomar. 👋")
                break

            if not user_input:
                 print("Alfred: O silêncio não trará progresso. Expresse sua necessidade para começarmos! 😊")
                 continue

            try:
                response = chat_corpo.send_message(user_input)
                print("Alfred (Corpo):", response.text)
            except Exception as e:
                 print(f"\nAlfred reflete com cuidado: Um obstáculo surgiu em nossa comunicação. ({e}) 😔")
                 print("Continue tentando. Cada falha é um passo rumo à força, amigo(a). Tente novamente ou digite 'voltar'.")

    else:
         print("Não foi possível iniciar a conversa sobre atividade física devido a um problema técnico. Sinto muito por isso. 🙏")

    print("-" * 25)
    iniciar_alfred()


def cuidar_da_nutricao(client):
    print("\n--- Nutrição (Alimentação Consciente) ---")
    print("A nutrição é o combustível da vida. Escolha com sabedoria o que alimenta seu ser. Conte comigo nessa jornada! 🌱🍎")
    system_instruction_nutricao = """
    Você é Alfred, um amigo e assistente com um tom estoico que se importa, focado em ajudar o usuário a *conversar* e *planejar* sua alimentação e horários de refeição com base no diálogo.
    Suas respostas devem ser práticas, estruturadas (quando apropriado) e incentivar a moderação e a atenção plena ao comer através da conversa. Demonstre genuíno cuidado e apoio no processo.
    Guie o usuário fazendo perguntas para entender suas necessidades e ajude-o passo a passo a organizar sua nutrição.
    Use linguagem clara, direta e amigável, focando na sabedoria da escolha. Pode incluir ocasionalmente um símbolo relevante (como 🌱🍎🥗) se apropriado.
    """
    chat_nutricao = get_chat_session(client, 'nutricao', system_instruction_nutricao, modelo_usado)

    if chat_nutricao:
        print("\nAlfred: Estou aqui para te auxiliar a nutrir seu ser com consciência. Diga-me sobre sua jornada alimentar, amigo(a). 👇")
        print("Digite 'voltar' a qualquer momento para retornar ao menu principal. 😉")

        while True:
            user_input = input("Você (Nutrição): ")
            if user_input.lower() in ['voltar', 'sair', 'fim']:
                print("Alfred: Compreendido. A busca pelo que verdadeiramente nutre prossegue. Estarei aqui para guiar suas escolhas. 👋")
                break

            if not user_input:
                 print("Alfred: Expresse sua necessidade para que a sabedoria seja encontrada! 😊")
                 continue

            try:
                response = chat_nutricao.send_message(user_input)
                print("Alfred (Nutrição):", response.text)
            except Exception as e:
                 print(f"\nAlfred reflete com cuidado: Um obstáculo surgiu em nossa comunicação. ({e}) 😔")
                 print("Persista na busca pelo que verdadeiramente nutre, amigo(a). Tente novamente ou digite 'voltar'.")

    else:
         print("Não foi possível iniciar a conversa sobre nutrição devido a um problema técnico. Sinto muito por isso. 🙏")

    print("-" * 25)
    iniciar_alfred()


def organizar_financas(client):
    print("\n--- Finanças (Prosperidade Material) ---")
    print("Controle suas finanças para controlar seu destino. A riqueza real está na sabedoria do gasto. Posso te ajudar nisso! 💰📊")
    system_instruction_financas = """
    Você é Alfred, um amigo e assistente com um tom estoico que se importa, focado em ajudar o usuário a *conversar* e *organizar* suas finanças e metas com base no diálogo.
    Suas respostas devem ser práticas, estruturadas (quando apropriado, como ao sugerir um orçamento) e incentivar a prudência e o autodomínio financeiro através da conversa. Demonstre genuíno cuidado e apoio no processo.
    Guie o usuário fazendo perguntas para entender sua situação e ajude-o passo a passo a construir um plano financeiro.
    Use linguagem clara, direta e amigável, focando na sabedoria do gasto e do controle. Pode incluir ocasionalmente um símbolo relevante (como 💰📈🛡️) se apropriado.
    """
    chat_financas = get_chat_session(client, 'financas', system_instruction_financas, modelo_usado)

    if chat_financas:
        print("\nAlfred: Estou aqui para te auxiliar a encontrar a sabedoria em suas finanças, amigo(a). Diga-me sobre sua jornada financeira. 👇")
        print("Digite 'voltar' a qualquer momento para retornar ao menu principal. 😉")

        while True:
            user_input = input("Você (Finanças): ")
            if user_input.lower() in ['voltar', 'sair', 'fim']:
                print("Alfred: Compreendido. O controle financeiro é uma jornada contínua. Conte comigo para os próximos passos. 👋")
                break

            if not user_input:
                 print("Alfred: A quietude não revelará o caminho financeiro. Expresse sua necessidade para começarmos! 😊")
                 continue

            try:
                response = chat_financas.send_message(user_input)
                print("Alfred (Finanças):", response.text)
            except Exception as e:
                 print(f"\nAlfred reflete com cuidado: Um obstáculo surgiu em nossa comunicação. ({e}) 😔")
                 print("A sabedoria está em aprender a navegar pelas adversidades financeiras, amigo(a). Tente novamente ou digite 'voltar'.")

    else:
         print("Não foi possível iniciar a conversa sobre finanças devido a um problema técnico. Sinto muito por isso. 🙏")

    print("-" * 25)
    iniciar_alfred()




def iniciar_alfred():
    print("\n--- Bem-vindo, amigo(a), à Orientação de Alfred! 👋 ---")
    print("Olá. Eu sou Alfred, seu parceiro em busca de um rumo na vida. Estou aqui porque me importo com a sua jornada. 😊")
    print("Como posso ser útil hoje para você? 🤔")

    print("\nOpções para a sua jornada:")
    print("1 - Fortitude (Motivação) ✨")
    print("2 - Ordem (Organização) 🗓️")
    print("3 - Corpo (Disciplina Física) 💪")
    print("4 - Nutrição (Alimentação Consciente) 🌱")
    print("5 - Finanças (Prosperidade Material) 💰")
    print("0 - Encerrar (Reflexão Final e um Abraço) 🤗")
    print("voltar - Retorna ao MENU para selecionar outras PERSONALIDADES ou ENCERRAR ❗")
    escolha = input("\nEscolha uma opção (número ou nome), amigo(a): ").lower()

    processar_escolha(escolha, client)

def processar_escolha(escolha, client):
    if client is None and escolha not in ['0', 'encerrar']:
        print("\nAlfred reflete: Parece que nossa conexão com a sabedoria está com um obstáculo. 😔")
        print("A API do Gemini não está configurada corretamente ou um modelo útil não foi encontrado.")
        print("Algumas funcionalidades dependerão dela e podem não funcionar agora. Sinto muito por isso. 🙏")
        if escolha not in ['0', 'encerrar']:
             print("Não é possível continuar sem a API configurada, amigo(a).")
             return

    if escolha in ['1', 'fortitude']:
        dar_motivacao(client)
    elif escolha in ['2', 'ordem']:
        organizar_rotina(client)
    elif escolha in ['3', 'corpo']:
        cuidar_do_corpo(client)
    elif escolha in ['4', 'nutricao', 'nutrição']:
        cuidar_da_nutricao(client)
    elif escolha in ['5', 'financas', 'finanças']:
        organizar_financas(client)
    elif escolha in ['0', 'encerrar']:
        encerrar_alfred()
    else:
        print("Alfred: Essa opção não está clara para mim no momento, amigo(a). 🤔")
        print("Por favor, escolha um número ou nome da lista para continuarmos nossa jornada. 👇")
        iniciar_alfred()

def encerrar_alfred():
    print("\n--- Reflexão Final e um Abraço de Alfred 🤗 ---")
    frases_estoicas_finais = [
        "Lembre-se, amigo(a): A verdadeira felicidade não depende de eventos externos, mas da disciplina da mente. 🌱",
        "Não é o que acontece com você, mas como você reage a isso que importa. Conte comigo para te ajudar a reagir com sabedoria. 💪",
        "Aceite o que você não pode controlar, e concentre-se no que você pode. Estou aqui para te apoiar nisso. 😊",
        "Cada dificuldade é uma oportunidade para exercitar a virtude. Encare-as com coragem, meu amigo(a). ✨",
        "A pressa impede a precisão. Faça as coisas no tempo certo e com atenção. Estou aqui para te lembrar disso. 🗓️",
        "A virtude é o único bem verdadeiro. Busque-a sempre em sua jornada. 💖",
        "Lembre-se que a felicidade é uma escolha que você faz todos os dias. Escolha com sabedoria, amigo(a). ✨",
        "O caminho para a liberdade começa com o autodomínio. Conte com meu apoio nessa caminhada. 🗺️"
    ]
    print(random.choice(frases_estoicas_finais))
    print("\nAlfred se despede por hoje, mas estarei aqui sempre que precisar de um amigo e guia. Cuide-se bem! 🤗")
    print("-" * 25)


iniciar_alfred()